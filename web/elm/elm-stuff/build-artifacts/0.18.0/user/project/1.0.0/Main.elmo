var _user$project$Main$takeWhile = F2(
	function (fun, xs) {
		var _p0 = xs;
		if (_p0.ctor === '::') {
			var _p1 = _p0._0;
			return _elm_lang$core$Native_Utils.eq(
				fun(_p1),
				true) ? {
				ctor: '::',
				_0: _p1,
				_1: A2(_user$project$Main$takeWhile, fun, _p0._1)
			} : xs;
		} else {
			return xs;
		}
	});
var _user$project$Main$dropWhile = F2(
	function (fun, xs) {
		var _p2 = xs;
		if (_p2.ctor === '::') {
			return _elm_lang$core$Native_Utils.eq(
				fun(_p2._0),
				true) ? A2(_user$project$Main$takeWhile, fun, _p2._1) : xs;
		} else {
			return xs;
		}
	});
var _user$project$Main$primesWithNext = F2(
	function (xs, n) {
		primesWithNext:
		while (true) {
			var list = A2(
				_user$project$Main$dropWhile,
				function (x) {
					return _elm_lang$core$Native_Utils.cmp(x * x, n) > 0;
				},
				xs);
			if (A2(
				_elm_lang$core$List$any,
				function (x) {
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Basics_ops['%'], n, x),
						0);
				},
				list)) {
				var _v2 = xs,
					_v3 = n + 1;
				xs = _v2;
				n = _v3;
				continue primesWithNext;
			} else {
				return {ctor: '::', _0: n, _1: xs};
			}
		}
	});
var _user$project$Main$last = function (xs) {
	last:
	while (true) {
		var _p3 = xs;
		if (_p3.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p3._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p3._0);
			} else {
				var _v5 = _p3._1;
				xs = _v5;
				continue last;
			}
		}
	}
};
var _user$project$Main$dupa = function (model) {
	var height = _elm_lang$core$Basics$toFloat(model.size.height);
	var width = _elm_lang$core$Basics$toFloat(model.size.width);
	return A2(
		_evancz$elm_graphics$Collage$rotate,
		model.rotate,
		A2(
			_evancz$elm_graphics$Collage$filled,
			_elm_lang$core$Color$red,
			A2(_evancz$elm_graphics$Collage$rect, 100, 100)));
};
var _user$project$Main$aaa = 1;
var _user$project$Main$postoXY = function (pos) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toFloat(pos.x),
		_1: _elm_lang$core$Basics$toFloat(pos.y)
	};
};
var _user$project$Main$path = function (model) {
	return _evancz$elm_graphics$Collage$path(
		A2(_elm_lang$core$List$map, _user$project$Main$postoXY, model.points));
};
var _user$project$Main$canvas = function (model) {
	var height = model.size.height;
	var width = model.size.width;
	return A3(
		_evancz$elm_graphics$Collage$collage,
		width,
		height,
		{
			ctor: '::',
			_0: _user$project$Main$dupa(model),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$traced,
					_evancz$elm_graphics$Collage$solid(_elm_lang$core$Color$black),
					_user$project$Main$path(model)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$stringzmiana = function (str) {
	var helper = F2(
		function (acc, strh) {
			helper:
			while (true) {
				var _p4 = strh;
				if (_p4.ctor === '::') {
					if (_p4._1.ctor === '::') {
						var _v7 = {
							ctor: '::',
							_0: _p4._0,
							_1: {ctor: '::', _0: _p4._1._0, _1: acc}
						},
							_v8 = _p4._1._1;
						acc = _v7;
						strh = _v8;
						continue helper;
					} else {
						return {ctor: '::', _0: _p4._0, _1: acc};
					}
				} else {
					return acc;
				}
			}
		});
	return _elm_lang$core$String$reverse(
		_elm_lang$core$String$fromList(
			A2(
				helper,
				{ctor: '[]'},
				_elm_lang$core$String$toList(str))));
};
var _user$project$Main$orElse = F2(
	function (def, x) {
		var _p5 = x;
		if (_p5.ctor === 'Just') {
			return _p5._0;
		} else {
			return def;
		}
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _evancz$elm_graphics$Element$toHtml(
				_user$project$Main$canvas(model)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$xxxx = _elm_lang$core$Basics$toString(124);
var _user$project$Main$check = _elm_lang$core$Native_Platform.outgoingPort(
	'check',
	function (v) {
		return v;
	});
var _user$project$Main$suggestions = _elm_lang$core$Native_Platform.incomingPort(
	'suggestions',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Main$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {rotate: a, a: b, b: c, primes: d, text: e, size: f, points: g, ratings: h, inputs: i};
	});
var _user$project$Main$Append = function (a) {
	return {ctor: 'Append', _0: a};
};
var _user$project$Main$Next = {ctor: 'Next'};
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$Ratings = function (a) {
	return {ctor: 'Ratings', _0: a};
};
var _user$project$Main$Draw = function (a) {
	return {ctor: 'Draw', _0: a};
};
var _user$project$Main$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {
		rotate: 0,
		a: 0,
		b: 1,
		text: '',
		primes: {
			ctor: '::',
			_0: 2,
			_1: {ctor: '[]'}
		},
		size: A2(_elm_lang$window$Window$Size, 0, 0),
		points: {ctor: '[]'},
		ratings: A2(
			_gdotdesign$elm_ui$Ui_Ratings$size,
			10,
			_gdotdesign$elm_ui$Ui_Ratings$init(
				{ctor: '_Tuple0'})),
		inputs: {ctor: '[]'}
	},
	_1: A2(
		_elm_lang$core$Task$perform,
		function (x) {
			return _user$project$Main$Resize(x);
		},
		_elm_lang$window$Window$size)
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(
				function (s) {
					return _user$project$Main$Resize(s);
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_user$project$Main$Draw),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$Primes = {ctor: 'Primes'};
var _user$project$Main$Fibbonaci = {ctor: 'Fibbonaci'};
var _user$project$Main$Rotate = {ctor: 'Rotate'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Rotate':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							rotate: model.rotate + 1.0e-4,
							inputs: A2(
								_elm_lang$core$Basics_ops['++'],
								model.inputs,
								{
									ctor: '::',
									_0: _user$project$Main$Rotate,
									_1: {ctor: '[]'}
								})
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(_user$project$Main$Next),
							_elm_lang$core$Task$succeed(
								{ctor: '_Tuple0'})),
						_1: {ctor: '[]'}
					});
			case 'Fibbonaci':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							a: model.b,
							b: model.a + model.b,
							text: A2(
								_elm_lang$core$Basics_ops['++'],
								model.text,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'\n',
									_elm_lang$core$Basics$toString(model.a))),
							inputs: A2(
								_elm_lang$core$Basics_ops['++'],
								model.inputs,
								{
									ctor: '::',
									_0: _user$project$Main$Fibbonaci,
									_1: {ctor: '[]'}
								})
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(_user$project$Main$Next),
							_elm_lang$core$Task$succeed(
								{ctor: '_Tuple0'})),
						_1: {ctor: '[]'}
					});
			case 'Primes':
				var n = function () {
					var _p7 = _elm_lang$core$List$head(model.primes);
					if (_p7.ctor === 'Just') {
						return _p7._0 + 1;
					} else {
						return -1;
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							primes: A2(_user$project$Main$primesWithNext, model.primes, n)
						}),
					{ctor: '[]'});
			case 'Resize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{size: _p6._0}),
					{ctor: '[]'});
			case 'Draw':
				var _p8 = _p6._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							points: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.update(
									_p8,
									{
										x: _p8.x - _elm_lang$core$Basics$floor(
											_elm_lang$core$Basics$toFloat(model.size.width) / 2),
										y: _elm_lang$core$Basics$floor(
											_elm_lang$core$Basics$toFloat(model.size.height) / 2) - _p8.y
									}),
								_1: model.points
							}
						}),
					{ctor: '[]'});
			case 'Ratings':
				var _p9 = A2(_gdotdesign$elm_ui$Ui_Ratings$update, _p6._0, model.ratings);
				var ratings = _p9._0;
				var cmd = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{ratings: ratings}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$Ratings, cmd)
				};
			case 'Clear':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							inputs: {ctor: '[]'}
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(_user$project$Main$NoOp),
							_elm_lang$core$Task$succeed(
								{ctor: '_Tuple0'})),
						_1: {ctor: '[]'}
					});
			case 'Next':
				var head = function () {
					var _p10 = _elm_lang$core$List$head(model.inputs);
					if (_p10.ctor === 'Just') {
						return _p10._0;
					} else {
						return _user$project$Main$NoOp;
					}
				}();
				var tail = function () {
					var _p11 = _elm_lang$core$List$tail(model.inputs);
					if (_p11.ctor === 'Just') {
						return _p11._0;
					} else {
						return {ctor: '[]'};
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{inputs: tail}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(head),
							_elm_lang$core$Task$succeed(
								{ctor: '_Tuple0'})),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							inputs: A2(_elm_lang$core$Basics_ops['++'], model.inputs, _p6._0)
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(_user$project$Main$Next),
							_elm_lang$core$Task$succeed(
								{ctor: '_Tuple0'})),
						_1: {ctor: '[]'}
					});
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init,
		view: _elm_lang$html$Html_Lazy$lazy(_user$project$Main$view),
		update: _user$project$Main$update,
		subscriptions: _user$project$Main$subscriptions
	})();
